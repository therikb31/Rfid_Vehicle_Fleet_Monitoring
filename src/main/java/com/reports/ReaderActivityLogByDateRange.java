package com.reports;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.OutputStream;
import java.sql.Date;
import java.text.SimpleDateFormat;
import java.util.Vector;

import javax.servlet.RequestDispatcher;
import javax.servlet.ServletException;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import com.database.ReaderDAO;
import com.itextpdf.text.Chunk;
import com.itextpdf.text.Document;
import com.itextpdf.text.DocumentException;
import com.itextpdf.text.Element;
import com.itextpdf.text.Font;
import com.itextpdf.text.FontFactory;
import com.itextpdf.text.PageSize;
import com.itextpdf.text.Paragraph;
import com.itextpdf.text.Phrase;
import com.itextpdf.text.Font.FontFamily;
import com.itextpdf.text.pdf.PdfPTable;
import com.itextpdf.text.pdf.PdfWriter;
import com.models.Reader;
import com.properties.Constants;
import com.utils.PDFHeaderFooter;
import com.utils.Util;

/**
 * Servlet implementation class ReaderActivityLogByDateRange
 */
public class ReaderActivityLogByDateRange extends HttpServlet {
	private static final long serialVersionUID = 1L;
       
    /**
     * @see HttpServlet#HttpServlet()
     */
    public ReaderActivityLogByDateRange() {
        super();
        // TODO Auto-generated constructor stub
    }

	/**
	 * @see HttpServlet#doGet(HttpServletRequest request, HttpServletResponse response)
	 */
	protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
		// TODO Auto-generated method stub
		RequestDispatcher rd = request.getRequestDispatcher("index.jsp");
		rd.forward(request, response);
	}

	/**
	 * @see HttpServlet#doPost(HttpServletRequest request, HttpServletResponse response)
	 */
	protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
		// TODO Auto-generated method stub
		String dateValue = new SimpleDateFormat("dd/MM/yyyy").format(new java.util.Date());
		String time = new SimpleDateFormat("HH:mm:ss aa").format(new java.util.Date()).toUpperCase();
		Document document = null;
		OutputStream outputStream = null;

		RequestDispatcher rd = null;
		HttpSession session = request.getSession();
		if(session.getAttribute("isLoggedIn") != "true") {
			rd = request.getRequestDispatcher("index.jsp");
			rd.forward(request, response);
			return;
		}
		try {
			Date from_date = Date.valueOf(request.getParameter("from_date"));
			Date to_date = Date.valueOf(request.getParameter("to_date"));
			String filepath = Constants.PDF_FILENAME;
			int marginLR = 30;
			document = new Document(PageSize.A4, marginLR, marginLR, 50, 50);
			File fileObj = new File(filepath);
			fileObj.createNewFile();
			outputStream = new FileOutputStream(new File(filepath));
			PdfWriter pw = PdfWriter.getInstance(document, outputStream);
			PDFHeaderFooter myHeaderFooter = new PDFHeaderFooter();
			myHeaderFooter.header = getServletContext().getRealPath("/static/Header/DailyLogHeader.png");
			pw.setPageEvent(myHeaderFooter);
			document.open();
			document.add(new Chunk(""));
			Font regular = new Font(FontFamily.HELVETICA, 12);
			Font bold = new Font(FontFamily.HELVETICA, 12, Font.BOLD);
			if (pw.getCurrentPageNumber() == 1) {
				document.add(new Phrase("Report Name:", regular));
				document.add(new Phrase(" Date Ranged Reader Activity Log\n", bold));

				document.add(new Phrase("Report from Date: ", regular));
				document.add(new Phrase(new SimpleDateFormat("dd/MM/yyyy").format(from_date) + "\n", bold));
				
				document.add(new Phrase("Report to Date: ", regular));
				document.add(new Phrase(new SimpleDateFormat("dd/MM/yyyy").format(to_date) + "\n", bold));

				document.add(new Phrase("Date Generated: ", regular));
				document.add(new Phrase(dateValue + "\n", bold));

				document.add(new Phrase("Time Generated: ", regular));
				document.add(new Phrase(time + "\n", bold));
				
				document.add(new Phrase("Generated By: ", regular));
				document.add(new Phrase( session.getAttribute("employee")+ "\n", bold));
//				document.newPage();
			}
			PdfPTable table = new PdfPTable(6);
			table.setTotalWidth(document.getPageSize().getWidth() - (float) 60.0);
			table.setLockedWidth(true);
			table.setWidths(new int[] { 1, 1, 3, 1, 1 ,1});
			table.addCell(Util.getCell("Sl No", bold));
			table.addCell(Util.getCell("Reader ID", bold));
			table.addCell(Util.getCell("Address", bold));
			table.addCell(Util.getCell("Latitude", bold));
			table.addCell(Util.getCell("Longitude", bold));
			table.addCell(Util.getCell("Activity", bold));

			table.setHeaderRows(1);
			Font font = FontFactory.getFont(FontFactory.TIMES, 10);
			Vector<Reader> log = ReaderDAO.getReaderActivityByDateRange(from_date,to_date);
			
			int i;
			for (i = 0; i < log.size(); i++) {
				table.addCell(new Phrase(Integer.toString(i + 1), font));
				table.addCell(new Phrase(log.elementAt(i).getReader_id(), font));
				table.addCell(new Phrase(log.elementAt(i).getAddress(), font));
				table.addCell(new Phrase(log.elementAt(i).getLat(), font));
				table.addCell(new Phrase(log.elementAt(i).getLon(), font));
				table.addCell(new Phrase(Integer.toString(log.elementAt(i).getActivity()), font));
			}

			document.add(table);
			Paragraph end = new Paragraph("--- x --- End of Report --- x ---");
			end.setAlignment(Element.ALIGN_CENTER);
			document.add(end);
			document.close();
			response.setContentType("application/pdf");
			File pdfFile = new File(filepath);
			pdfFile.createNewFile();
			FileInputStream fileInputStream = new FileInputStream(pdfFile);
			OutputStream responseOutputStream = response.getOutputStream();
			int bytes;
			while ((bytes = fileInputStream.read()) != -1) {
				responseOutputStream.write(bytes);

			}
			fileInputStream.close();
		} catch (DocumentException e) {
			request.setAttribute("message", "Document Exception");
			request.setAttribute("redirect", "dashboard.jsp");
			rd = request.getRequestDispatcher("error.jsp");
			rd.forward(request, response);
			e.printStackTrace();
		} catch (FileNotFoundException e) {
			request.setAttribute("message", "File Creation Error");
			request.setAttribute("redirect", "dashboard.jsp");
			rd = request.getRequestDispatcher("error.jsp");
			rd.forward(request, response);
		} catch (IOException e) {
			request.setAttribute("message", "IO Error");
			request.setAttribute("redirect", "dashboard.jsp");
			rd = request.getRequestDispatcher("error.jsp");
			rd.forward(request, response);
		} catch (IllegalArgumentException e) {
			request.setAttribute("message", "Illegal API Call Made");
			request.setAttribute("redirect", "dashboard.jsp");
			rd = request.getRequestDispatcher("error.jsp");
			rd.forward(request, response);

		} finally {
			if (outputStream != null) {
				outputStream.close();
			}
		}
	}

}
